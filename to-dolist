import java.io.*;
import java.nio.file.*;
import java.util.*;

/* === Task class – oka oka to-do item ni represent chestundi === */
class Task {
    int id;
    String description;
    boolean completed;

    Task(int id, String description, boolean completed) {
        this.id = id;
        this.description = description;
        this.completed = completed;
    }

    @Override
    public String toString() {
        return String.format("[%d] %s %s",
                id,
                completed ? "(✓)" : "( )",
                description);
    }

    /* File-lo ki oka string-ga convert cheyadaniki */
    String toFileLine() {
        return id + "|" + completed + "|" + description;
    }

    /* File-nunchi line chadivi, Task object create cheyadaniki */
    static Task fromFileLine(String line) {
        String[] parts = line.split("\\|", 3);
        int id = Integer.parseInt(parts[0]);
        boolean comp = Boolean.parseBoolean(parts[1]);
        String desc = parts[2];
        return new Task(id, desc, comp);
    }
}

/* === Main manager class === */
public class TodoListManager {

    private static final String FILE_NAME = "tasks.txt";
    private List<Task> tasks = new ArrayList<>();
    private int nextId = 1;

    /* -------- Main menu loop -------- */
    public void start() {
        // Existing tasks load cheyadam
        loadTasks();

        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.println("\n--- TO-DO LIST MANAGER ---");
            System.out.println("1. Add Task");
            System.out.println("2. View Tasks");
            System.out.println("3. Mark Task Completed");
            System.out.println("4. Delete Task");
            System.out.println("5. Exit");
            System.out.print("Mee choice: ");
            String choice = sc.nextLine().trim();

            switch (choice) {
                case "1":
                    addTask(sc);
                    break;
                case "2":
                    listTasks();
                    break;
                case "3":
                    markCompleted(sc);
                    break;
                case "4":
                    deleteTask(sc);
                    break;
                case "5":
                    saveTasks();
                    System.out.println("Changes save chesi exit avutunnanu. Bye!");
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    /* -------- Add -------- */
    private void addTask(Scanner sc) {
        System.out.print("Task description: ");
        String desc = sc.nextLine().trim();
        if (desc.isEmpty()) {
            System.out.println("Description empty undakudadu.");
            return;
        }
        Task t = new Task(nextId++, desc, false);
        tasks.add(t);
        System.out.println("Task added.");
    }

    /* -------- View -------- */
    private void listTasks() {
        if (tasks.isEmpty()) {
            System.out.println("No tasks yet.");
            return;
        }
        tasks.forEach(System.out::println);
    }

    /* -------- Mark complete -------- */
    private void markCompleted(Scanner sc) {
        System.out.print("Enter task id to mark completed: ");
        int id = readInt(sc);
        Task t = findById(id);
        if (t != null) {
            t.completed = true;
            System.out.println("Task marked ✓.");
        } else {
            System.out.println("Task id kanipinchaledu.");
        }
    }

    /* -------- Delete -------- */
    private void deleteTask(Scanner sc) {
        System.out.print("Enter task id to delete: ");
        int id = readInt(sc);
        Task t = findById(id);
        if (t != null) {
            tasks.remove(t);
            System.out.println("Task deleted.");
        } else {
            System.out.println("Task id kanipinchaledu.");
        }
    }

    /* --- Helper: find by id --- */
    private Task findById(int id) {
        return tasks.stream()
                .filter(t -> t.id == id)
                .findFirst()
                .orElse(null);
    }

    /* --- Helper: safe integer read --- */
    private int readInt(Scanner sc) {
        try {
            return Integer.parseInt(sc.nextLine().trim());
        } catch (NumberFormatException e) {
            System.out.println("Number kaavali!");
            return -1;
        }
    }

    /* -------- File handling -------- */
    private void loadTasks() {
        Path path = Paths.get(FILE_NAME);
        if (!Files.exists(path)) return;

        try (BufferedReader br = Files.newBufferedReader(path)) {
            String line;
            while ((line = br.readLine()) != null) {
                Task t = Task.fromFileLine(line);
                tasks.add(t);
                nextId = Math.max(nextId, t.id + 1); // next unique id
            }
        } catch (IOException e) {
            System.out.println("Loading error: " + e.getMessage());
        }
    }

    private void saveTasks() {
        try (BufferedWriter bw = Files.newBufferedWriter(Paths.get(FILE_NAME))) {
            for (Task t : tasks) {
                bw.write(t.toFileLine());
                bw.newLine();
            }
        } catch (IOException e) {
            System.out.println("Save error: " + e.getMessage());
        }
    }

    /* -------- main() -------- */
    public static void main(String[] args) {
        new TodoListManager().start();
    }
}
javac TodoListManager.java
java TodoListManager
